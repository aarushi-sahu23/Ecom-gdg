# -*- coding: utf-8 -*-
"""packagingrecommendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U9DOTrKhnXYqhv7Q0QUcaut66v8ONv1R
"""

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import joblib

data = pd.read_csv('smart_packaging_dataset_10000.csv')

# Preprocessing the dataset
# Label encode the 'Temperature_Sensitive' column (Yes -> 1, No -> 0)
label_encoder = LabelEncoder()
data['Temperature_Sensitive'] = label_encoder.fit_transform(data['Temperature_Sensitive'])

data = pd.get_dummies(data, columns=['Product_Category'], drop_first=True)

data.head()

X = data.drop(['Product_Name', 'Recommended_Packaging', 'Packaging_Cost (in Rs)'], axis=1)  # Features
y = data['Recommended_Packaging']  # Target variable - Packaging recommendation

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=50)

# Train the model
model = RandomForestClassifier(n_estimators=200, class_weight='balanced', random_state=50)
model.fit(X_train, y_train)

# Predict and evaluate the model
y_pred = model.predict(X_test)

y_pred

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix

# Generate predictions
y_pred = model.predict(X_test)  # Ensure you're using the correct test set

# Create confusion matrix
cm = confusion_matrix(y_test, y_pred)

# Create labels for the categories (these should match your target classes)
labels = ['Fragile', 'Non-Fragile']  # Change this based on your classes

# Plot confusion matrix
plt.figure(figsize=(8,6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=labels, yticklabels=labels)
plt.title("Confusion Matrix")
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.show()