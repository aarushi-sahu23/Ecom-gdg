# -*- coding: utf-8 -*-
"""chatbot amazon

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pAgdln1hdXByEls1kVnsWtvB_a_BPsKw
"""

!pip install hummingbird-ml

import random
import string

# Define intent labels
intent_labels = {
    0: "greetings",
    1: "product_search",
    2: "order_status",
    3: "return_policy",
    4: "complaint",
    5: "farewell"
}

# Preprocess Input Function
def preprocess_input(user_input):
    return user_input.lower().strip()  # Convert to lowercase and remove extra spaces

# Get Intent Prediction (This part should already be working with the model)
def get_intent(user_input):
    input_vector = vectorizer.transform([user_input])  # Convert the input into a vector
    dense_input = input_vector.toarray()  # Convert sparse matrix to dense
    prediction = hb_model.predict(dense_input)  # Predict the intent
    predicted_intent = prediction[0]  # Get the predicted class (numeric)
    return intent_labels.get(predicted_intent, "unknown")  # Map to intent

# Function to simulate order tracking
def track_order(order_number):
    status_messages = [
        f"Order {order_number} has been dispatched and is on its way to you.",
        f"Order {order_number} is out for delivery. You can expect it soon.",
        f"Order {order_number} has been delayed. We apologize for the inconvenience.",
        f"Order {order_number} has been successfully delivered. Enjoy your product!",
        f"Order {order_number} is in transit. Please check back later for updates."
    ]
    return random.choice(status_messages)

# Function to generate a random meeting link
def generate_meeting_link():
    random_string = ''.join(random.choices(string.ascii_letters + string.digits, k=10))  # Generate a random 10-character string
    return f"https://meet.amazon.com/{random_string}"

# Function to simulate complaint handling
def handle_complaint(product_name, issue):
    resolution_messages = [
        f"Thank you for reporting the issue with {product_name}. Our team will investigate and get back to you.",
        f"We are sorry for the inconvenience caused by {product_name}. You can contact the seller for further assistance.",
        f"Your complaint regarding {product_name} has been received. A video call with the seller is available to resolve this. Here is your meeting link: {generate_meeting_link()}",
        f"The issue with {product_name} has been noted. A support ticket has been created for immediate resolution. You can also schedule a video call with the seller here: {generate_meeting_link()}"
    ]
    return random.choice(resolution_messages)

# Define the chatbot flow
def chatbot():
    while True:
        user_input = input("You: ")  # User enters a message

        # Preprocess the input
        user_input = preprocess_input(user_input)

        # Get the intent prediction
        intent = get_intent(user_input)

        # Main chatbot flow based on intent
        if intent == "greetings":
            print("Amazon Chatbot: Hello! How can I assist you today?")

        elif intent == "order_status":
            print("Amazon Chatbot: Sure, I can help with that. Please provide your order number.")
            order_number = input("You: ")
            order_status = track_order(order_number)  # Simulate order status
            print(f"Amazon Chatbot: {order_status}")

        elif intent == "complaint":
            print("Amazon Chatbot: Please provide your order number.")
            order_number = input("You: ")
            print(f"Amazon Chatbot: Checking details for order {order_number}.")

            # Ask for product name and issue description
            print("Amazon Chatbot: Now, please tell me the product name and describe the issue you are facing.")
            product_name = input("You: ")
            issue = input("You: ")

            # Handle the complaint
            resolution_message = handle_complaint(product_name, issue)
            print(f"Amazon Chatbot: {resolution_message}")

            # Ask for rating after resolution
            print("Amazon Chatbot: Would you like to rate our service? (1-5 stars)")
            rating = input("You: ")
            print(f"Amazon Chatbot: Thank you for your rating of {rating} stars!")

        elif intent == "farewell":
            print("Amazon Chatbot: Thank you for visiting Amazon! Have a great day!")
            break  # Exit the chatbot loop

        else:
            print("Amazon Chatbot: I'm sorry, I didn't understand that. Can you please rephrase?")

# Run the chatbot
chatbot()

!pip install streamlit

# Install necessary packages
!pip install streamlit -q
!pip install Pillow
!pip install pyngrok -q

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import random
# import time
# import string
# 
# # Define intent labels
# intent_labels = {
#     0: "greetings",
#     1: "product_search",
#     2: "order_status",
#     3: "return_policy",
#     4: "complaint",
#     5: "farewell"
# }
# 
# # Preprocess Input Function
# def preprocess_input(user_input):
#     return user_input.lower().strip()  # Convert to lowercase and remove extra spaces
# 
# # Get Intent Prediction (This part should already be working with the model)
# def get_intent(user_input):
#     # Placeholder for the actual model prediction (replace with your model)
#     input_vector = vectorizer.transform([user_input])  # Convert the input into a vector
#     dense_input = input_vector.toarray()  # Convert sparse matrix to dense
#     prediction = hb_model.predict(dense_input)  # Predict the intent
#     predicted_intent = prediction[0]  # Get the predicted class (numeric)
#     return intent_labels.get(predicted_intent, "unknown")  # Map to intent
# 
# # Helper function to simulate order tracking
# def track_order(order_number):
#     status_messages = [
#         f"Order {order_number} has been dispatched and is on its way to you.",
#         f"Order {order_number} is out for delivery. You can expect it soon.",
#         f"Order {order_number} has been delayed. We apologize for the inconvenience.",
#         f"Order {order_number} has been successfully delivered. Enjoy your product!",
#         f"Order {order_number} is in transit. Please check back later for updates."
#     ]
#     return random.choice(status_messages)
# 
# # Function to generate a random meeting link
# def generate_meeting_link():
#     random_string = ''.join(random.choices(string.ascii_letters + string.digits, k=10))  # Generate a random 10-character string
#     return f"https://meet.google.com/{random_string}"
# 
# # Function to simulate complaint handling
# def handle_complaint(product_name, issue):
#     resolution_messages = [
#         f"Thank you for reporting the issue with {product_name}. Our team will investigate and get back to you.",
#         f"We are sorry for the inconvenience caused by {product_name}. You can contact the seller for further assistance.",
#         f"Your complaint regarding {product_name} has been received. A video call with the seller is available to resolve this. Here is your meeting link: {generate_meeting_link()}",
#         f"The issue with {product_name} has been noted. A support ticket has been created for immediate resolution. You can also schedule a video call with the seller here: {generate_meeting_link()}"
#     ]
#     return random.choice(resolution_messages)
# 
# # Streamlit app layout
# st.title("Amazon Chatbot")
# 
# # Text input for the user to ask a question
# user_input = st.text_input("Ask me anything about your order or Amazon services:")
# 
# if user_input:
#     # Preprocess the input
#     user_input = preprocess_input(user_input)
# 
#     # Get the intent prediction (this needs to be connected to your actual model)
#     intent = get_intent(user_input)
# 
#     # Main chatbot flow based on intent
#     if intent == "greetings":
#         st.write("Amazon Chatbot: Hello! How can I assist you today?")
# 
#     elif intent == "order_status":
#         order_number = st.text_input("Please provide your order number:")
#         if order_number:
#             order_status = track_order(order_number)  # Simulate order status
#             st.write(f"Amazon Chatbot: {order_status}")
# 
#     elif intent == "complaint":
#         order_number = st.text_input("Please provide your order number:")
#         if order_number:
#             st.write(f"Amazon Chatbot: Checking details for order {order_number}.")
# 
#             # Ask for product name and issue description
#             product_name = st.text_input("Please tell me the product name:")
#             issue = st.text_input("Please describe the issue you're facing:")
# 
#             if product_name and issue:
#                 # Handle the complaint
#                 resolution_message = handle_complaint(product_name, issue)
#                 st.write(f"Amazon Chatbot: {resolution_message}")
# 
#                 # Ask for rating after resolution
#                 rating = st.selectbox("Would you like to rate our service?", options=["1", "2", "3", "4", "5"])
#                 st.write(f"Amazon Chatbot: Thank you for your rating of {rating} stars!")
# 
#     elif intent == "farewell":
#         st.write("Amazon Chatbot: Thank you for visiting Amazon! Have a great day!")
# 
#     else:
#         st.write("Amazon Chatbot: I'm sorry, I didn't understand that. Can you please rephrase?")
# 
#     # Simulate delay to make it more realistic
#     time.sleep(1)
# 
#     # Example to show multiple random responses
#     if intent == "order_status":
#         st.write(f"Amazon Chatbot: Also, your order is now in 'Dispatched' status.")
#     elif intent == "complaint":
#         st.write("Amazon Chatbot: We are sorry for the inconvenience. A support representative will reach out to you soon.")
#     elif intent == "return":
#         st.write("Amazon Chatbot: Please ensure the item is in its original condition before returning.")
# 
# # Expose the app via localtunnel (for remote access)
# !wget -q -O - ipv4.icanhazip.com
# !streamlit run app.py & npx localtunnel --port 8501
#

!wget -q -O - ipv4.icanhazip.com
!streamlit run app.py & npx localtunnel --port 8501

